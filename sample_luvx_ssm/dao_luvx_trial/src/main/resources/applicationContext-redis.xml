<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:p="http://www.springframework.org/schema/p"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/mvc
        http://www.springframework.org/schema/mvc/spring-mvc.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx.xsd">

    <!-- 加载配置文件 -->
    <context:property-placeholder location="classpath:redis.properties"/>
    <!--<context:component-scan base-package="org.luvx.dao.redis"/>-->

    <!--引入Redis配置文件-->
    <!-- <bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="locations">
            <list>
                <value>classpath:redis.properties</value>
            </list>
        </property>
    </bean> -->

    <!-- jedis 连接池配置 -->
    <bean id="poolConfig" class="redis.clients.jedis.JedisPoolConfig">
        <property name="maxIdle" value="${redis.maxIdle}"/>
        <property name="maxWaitMillis" value="${redis.maxWait}"/>
        <property name="testOnBorrow" value="${redis.testOnBorrow}"/>
        <property name="maxTotal" value="${redis.maxActive}"/>
        <property name="testOnReturn" value="${redis.testOnReturn}"/>
        <property name="blockWhenExhausted" value="${redis.blockWhenExhausted}"/>
        <property name="testWhileIdle" value="${redis.testWhileIdle}"/>
        <property name="timeBetweenEvictionRunsMillis" value="${redis.timeBetweenEvictionRunsMillis}"/>
        <property name="minEvictableIdleTimeMillis" value="${redis.minEvictableIdleTimeMillis}"/>
        <property name="softMinEvictableIdleTimeMillis" value="${redis.softMinEvictableIdleTimeMillis}"/>
    </bean>

    <!-- redis 连接工厂 -->
    <!--<bean id="connectionFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">-->
    <!--<property name="poolConfig" ref="poolConfig"/>-->
    <!--<property name="hostName" value="${redis.host}"/>-->
    <!--<property name="port" value="${redis.port}"/>-->
    <!--<property name="password" value="${redis.password}"/>-->
    <!--<property name="timeout" value="${redis.timeout}"/>-->
    <!--</bean>-->

    <bean id="connectionFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory"
          p:pool-config-ref="poolConfig"
          p:host-name="${redis.host}"
          p:port="${redis.port}"
          p:password="${redis.password}"
          p:timeout="${redis.timeout}"
          p:usePool="true">
    </bean>>

    <!-- redis操作模板,这里采用尽量面向对象的模板 使用下句会无法使用模糊匹配-->
    <!--<bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate"/>-->
    <!--
        p:enable-transaction-support="false"
        设置setEnableTransactionSupport(true),当前线程会强制先 MULTI命令
     -->
    <bean id="redisTemplate" class="org.springframework.data.redis.core.StringRedisTemplate"
          p:enable-transaction-support="true">
        <property name="connectionFactory" ref="connectionFactory"/>
        <!-- 如果不配置Serializer,那么存储的时候只能使用String,如果用对象类型存储,那么会提示错误 can't cast to String-->
        <property name="keySerializer">
            <!--对key的默认序列化器.默认值是StringSerializer-->
            <bean class="org.springframework.data.redis.serializer.StringRedisSerializer"/>
        </property>
        <!--是对value的默认序列化器,默认值是取自DefaultSerializer的JdkSerializationRedisSerializer.-->
        <property name="valueSerializer">
            <bean class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer"/>
        </property>
        <!--存储Map时key需要的序列化配置-->
        <property name="hashKeySerializer">
            <bean class="org.springframework.data.redis.serializer.StringRedisSerializer"/>
        </property>
        <!--存储Map时value需要的序列化配置-->
        <property name="hashValueSerializer">
            <bean class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer"/>
        </property>
        <!--开启事务
        系统自动帮我们拿到了事务中绑定的连接.可以在一个方法的多次对Redis增删改查中,始终使用同一个连接.
        -->
        <property name="enableTransactionSupport" value="true"/>
        <!--在Spring中@Transactional 也是可以进行事物控制的.-->
    </bean>

    <!-- 缓存管理器: 使用redis 当做缓存 -->
    <!--<bean id="cacheManager" class="org.springframework.data.redis.cache.RedisCacheManager">-->
    <!--<constructor-arg ref="redisTemplate"/>-->
    <!--</bean>-->

    <!--<bean id="redisUtil" class="org.luvx.utils.RedisUtil">-->
    <!--<property name="redisTemplate" ref="redisTemplate"/>-->
    <!--</bean>-->

    <!-- 缓存拦截器配置 -->
    <!--<bean id="methodCacheInterceptor" class="org.luvx.interceptor.MethodCacheInterceptor">-->
    <!--<property name="redisUtil" ref="redisUtil"/>-->
    <!--<property name="defaultCacheExpireTime" value="${defaultCacheExpireTime}"/>-->
    <!--&lt;!&ndash; 禁用缓存的类名列表 &ndash;&gt;-->
    <!--<property name="targetNamesList">-->
    <!--<list>-->
    <!--<value></value>-->
    <!--</list>-->
    <!--</property>-->
    <!--&lt;!&ndash; 禁用缓存的方法名列表 &ndash;&gt;-->
    <!--<property name="methodNamesList">-->
    <!--<list>-->
    <!--<value></value>-->
    <!--</list>-->
    <!--</property>-->
    <!--</bean>-->

    <!--配置切面拦截方法 -->
    <!--<aop:config proxy-target-class="true">-->
    <!--<aop:pointcut id="controllerMethodPointcut"-->
    <!--expression="execution(* org.luvx.service.impl.*.select*(..))"/>-->
    <!--<aop:advisor advice-ref="methodCacheInterceptor" pointcut-ref="controllerMethodPointcut"/>-->
    <!--</aop:config>-->

    <bean id="userDAO" class="org.luvx.dao.redis.UserDAOImpl"/>
</beans>