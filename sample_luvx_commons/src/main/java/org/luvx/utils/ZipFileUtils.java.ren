package org.luvx.utils;

import org.apache.commons.compress.archivers.zip.ZipArchiveEntry;
import org.apache.commons.compress.archivers.zip.ZipArchiveInputStream;
import org.apache.commons.compress.utils.IOUtils;
import org.apache.commons.lang.StringUtils;

import java.io.*;
import java.util.ArrayList;
import java.util.List;

public class ZipFileUtils {
    public static final int BUFFER_SIZE = 1024;

    /**
     * 解压 zip 文件
     *
     * @param zipFile zip 压缩文件
     * @param destDir zip 压缩文件解压后保存的目录, 为空则为zip包同目录下同名文件夹
     * @return 返回 zip 压缩文件里的文件名的 list
     */
    public static List<String> unZip(File zipFile, String destDir) {
        if (StringUtils.isBlank(destDir)) {
            destDir = zipFile.getParent() + File.separator + (zipFile.getName().substring(0, zipFile.getName().lastIndexOf("."))) + File.separator;
        }
        // 创建目标文件夹
        File descDirFile = new File(destDir);
        if (!descDirFile.exists()) {
            descDirFile.mkdirs();
        }

        ZipArchiveInputStream is = null;
        List<String> fileNames = new ArrayList<>();

        try {
            is = new ZipArchiveInputStream(new BufferedInputStream(new FileInputStream(zipFile), BUFFER_SIZE), "GBK");
            ZipArchiveEntry entry = null;

            // 返回所有路径(文件+目录)
            // fileNames.add(entry.getName());

            while ((entry = is.getNextZipEntry()) != null) {
                if (entry.isDirectory()) {
                    File directory = new File(destDir, entry.getName());
                    directory.mkdirs();
                } else {
                    // 只返回文件的路径
                    fileNames.add(destDir + entry.getName());
                    OutputStream os = null;
                    try {
                        os = new BufferedOutputStream(new FileOutputStream(new File(destDir, entry.getName())), BUFFER_SIZE);
                        IOUtils.copy(is, os);
                    } finally {
                        IOUtils.closeQuietly(os);
                    }
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            IOUtils.closeQuietly(is);
        }
        return fileNames;
    }
}

